#!/bin/bash
# graph-route - Create or update Grafana dashboard for a service

# Dashboard generation configuration
GRAFANA_URL="${GRAFANA_URL:-http://localhost:3002}"
GRAFANA_PASSWORD="${GRAFANA_PASSWORD:-prom-operator}"

if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
    echo "Usage: $0 <service-name> [--wait-for-metrics]"
    echo ""
    echo "Creates a Grafana dashboard for the specified service."
    echo ""
    echo "Options:"
    echo "  --wait-for-metrics    Wait for service to start reporting metrics before creating dashboard"
    echo ""
    echo "Environment variables:"
    echo "  GRAFANA_URL       Grafana instance URL (default: http://localhost:3002)"
    echo "  GRAFANA_PASSWORD  Grafana admin password (default: prom-operator)"
    echo ""
    echo "Examples:"
    echo "  $0 list-hot-posts                    # Create dashboard immediately"
    echo "  $0 new-service --wait-for-metrics   # Wait for metrics first"
    exit 1
fi

SERVICE_NAME="$1"
WAIT_FOR_METRICS=false

# Check for --wait-for-metrics flag
if [ "$2" = "--wait-for-metrics" ]; then
    WAIT_FOR_METRICS=true
fi

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DASHBOARD_GENERATOR="$SCRIPT_DIR/generate-service-dashboard.sh"

echo "üìä Creating Grafana dashboard for service: $SERVICE_NAME"

if [ ! -f "$DASHBOARD_GENERATOR" ]; then
    echo "‚ùå Dashboard generator not found at $DASHBOARD_GENERATOR"
    exit 1
fi

# Wait for metrics if requested
if [ "$WAIT_FOR_METRICS" = "true" ]; then
    echo "‚è≥ Waiting for service to start reporting metrics..."
    
    # Check if service is reporting metrics
    MAX_RETRIES=12  # 2 minutes total (12 * 10 seconds)
    RETRY_COUNT=0
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        echo "üîç Checking if service $SERVICE_NAME is reporting metrics... (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
        
        # Check if the service has metrics in Prometheus
        METRICS_RESPONSE=$(curl -s -u "admin:$GRAFANA_PASSWORD" \
            "$GRAFANA_URL/api/datasources/proxy/uid/prometheus/api/v1/query?query=lyku_requests_total%7Bexported_service%3D%22$SERVICE_NAME%22%7D" \
            2>/dev/null || echo '{"data":{"result":[]}}')
        
        METRIC_COUNT=$(echo "$METRICS_RESPONSE" | jq '.data.result | length' 2>/dev/null || echo "0")
        
        if [ "$METRIC_COUNT" -gt 0 ]; then
            echo "‚úÖ Service is reporting metrics!"
            break
        fi
        
        if [ $RETRY_COUNT -eq $((MAX_RETRIES - 1)) ]; then
            echo "‚ö†Ô∏è  Service is not reporting metrics yet, but proceeding with dashboard creation"
            echo "   The dashboard will show data once the service starts reporting metrics"
            break
        fi
        
        sleep 10
        ((RETRY_COUNT++))
    done
fi

# Generate dashboard
echo "üìä Creating dashboard..."
if "$DASHBOARD_GENERATOR" "$SERVICE_NAME" "$GRAFANA_URL" "$GRAFANA_PASSWORD"; then
    echo ""
    echo "üéâ Dashboard creation complete!"
    echo "üìä Monitor your service at: $GRAFANA_URL/d/lyku-service-$SERVICE_NAME"
    echo "üè† Overview dashboard: $GRAFANA_URL/d/lyku-services-v3/lyku-services-overview-clean"
else
    echo "‚ùå Dashboard creation failed"
    echo "   Check your Grafana connection and credentials"
    exit 1
fi