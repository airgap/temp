{
  "graph": {
    "nodes": {
      "@lyku/list-feed-posts-unauthenticated": {
        "name": "@lyku/list-feed-posts-unauthenticated",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-feed-posts-unauthenticated",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-feed-posts-unauthenticated",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-feed-posts-unauthenticated"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-feed-posts-unauthenticated --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-feed-posts-unauthenticated"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-feed-posts-unauthenticated",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-feed-posts-unauthenticated --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-feed-posts-unauthenticated",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-groups-unauthenticated": {
        "name": "@lyku/list-groups-unauthenticated",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-groups-unauthenticated",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-groups-unauthenticated",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-groups-unauthenticated"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-groups-unauthenticated --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-groups-unauthenticated"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-unauthenticated",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-unauthenticated --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-groups-unauthenticated",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-user-posts-with-meta": {
        "name": "@lyku/list-user-posts-with-meta",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-user-posts-with-meta",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-user-posts-with-meta",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-user-posts-with-meta"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-user-posts-with-meta --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-user-posts-with-meta"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-user-posts-with-meta",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-user-posts-with-meta --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-user-posts-with-meta",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/listen-for-notifications": {
        "name": "@lyku/listen-for-notifications",
        "type": "lib",
        "data": {
          "root": "apps/routes/listen-for-notifications",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/listen-for-notifications",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route listen-for-notifications"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route listen-for-notifications --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route listen-for-notifications"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-notifications",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-notifications --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/listen-for-notifications",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-achievement-grants": {
        "name": "@lyku/list-achievement-grants",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-achievement-grants",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-achievement-grants",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-achievement-grants"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-achievement-grants --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-achievement-grants"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-achievement-grants",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-achievement-grants --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-achievement-grants",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/listen-for-achievements": {
        "name": "@lyku/listen-for-achievements",
        "type": "lib",
        "data": {
          "root": "apps/routes/listen-for-achievements",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/listen-for-achievements",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route listen-for-achievements"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route listen-for-achievements --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route listen-for-achievements"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-achievements",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-achievements --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/listen-for-achievements",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/authorize-image-upload": {
        "name": "@lyku/authorize-image-upload",
        "type": "lib",
        "data": {
          "root": "apps/routes/authorize-image-upload",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/authorize-image-upload",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route authorize-image-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route authorize-image-upload --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route authorize-image-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route authorize-image-upload",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route authorize-image-upload --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/authorize-image-upload",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/decline-friend-request": {
        "name": "@lyku/decline-friend-request",
        "type": "lib",
        "data": {
          "root": "apps/routes/decline-friend-request",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/decline-friend-request",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route decline-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route decline-friend-request --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route decline-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route decline-friend-request",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route decline-friend-request --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/decline-friend-request",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-channel-sensitives": {
        "name": "@lyku/get-channel-sensitives",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-channel-sensitives",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-channel-sensitives",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-channel-sensitives"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-channel-sensitives --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-channel-sensitives"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-channel-sensitives",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-channel-sensitives --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-channel-sensitives",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/accept-friend-request": {
        "name": "@lyku/accept-friend-request",
        "type": "lib",
        "data": {
          "root": "apps/routes/accept-friend-request",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/accept-friend-request",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route accept-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route accept-friend-request --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route accept-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route accept-friend-request",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route accept-friend-request --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/accept-friend-request",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/accept-match-proposal": {
        "name": "@lyku/accept-match-proposal",
        "type": "lib",
        "data": {
          "root": "apps/routes/accept-match-proposal",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/accept-match-proposal",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/build-route accept-match-proposal"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route accept-match-proposal --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route accept-match-proposal"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route accept-match-proposal",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route accept-match-proposal --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/accept-match-proposal",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/create-friend-request": {
        "name": "@lyku/create-friend-request",
        "type": "lib",
        "data": {
          "root": "apps/routes/create-friend-request",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/create-friend-request",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route create-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route create-friend-request --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-friend-request",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-friend-request --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/create-friend-request",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-friendship-status": {
        "name": "@lyku/get-friendship-status",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-friendship-status",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-friendship-status",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-friendship-status"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-friendship-status --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-friendship-status"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-friendship-status",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-friendship-status --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-friendship-status",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-groups-i-created": {
        "name": "@lyku/list-groups-i-created",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-groups-i-created",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-groups-i-created",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-groups-i-created"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-groups-i-created --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-groups-i-created"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-i-created",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-i-created --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-groups-i-created",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/recind-friend-request": {
        "name": "@lyku/recind-friend-request",
        "type": "lib",
        "data": {
          "root": "apps/routes/recind-friend-request",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/recind-friend-request",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route recind-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route recind-friend-request --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route recind-friend-request"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route recind-friend-request",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route recind-friend-request --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/recind-friend-request",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/confirm-image-upload": {
        "name": "@lyku/confirm-image-upload",
        "type": "lib",
        "data": {
          "root": "apps/routes/confirm-image-upload",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/confirm-image-upload",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route confirm-image-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route confirm-image-upload --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route confirm-image-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-image-upload",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-image-upload --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/confirm-image-upload",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/confirm-video-upload": {
        "name": "@lyku/confirm-video-upload",
        "type": "lib",
        "data": {
          "root": "apps/routes/confirm-video-upload",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/confirm-video-upload",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route confirm-video-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route confirm-video-upload --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route confirm-video-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-video-upload",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-video-upload --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/confirm-video-upload",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-match-proposals": {
        "name": "@lyku/list-match-proposals",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-match-proposals",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-match-proposals",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-match-proposals"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-match-proposals --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-match-proposals"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-match-proposals",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-match-proposals --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-match-proposals",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/listen-for-ttf-plays": {
        "name": "@lyku/listen-for-ttf-plays",
        "type": "lib",
        "data": {
          "root": "apps/routes/listen-for-ttf-plays",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/listen-for-ttf-plays",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route listen-for-ttf-plays"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route listen-for-ttf-plays --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route listen-for-ttf-plays"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-ttf-plays",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-for-ttf-plays --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/listen-for-ttf-plays",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/listen-to-post-count": {
        "name": "@lyku/listen-to-post-count",
        "type": "lib",
        "data": {
          "root": "apps/routes/listen-to-post-count",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/listen-to-post-count",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route listen-to-post-count"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route listen-to-post-count --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route listen-to-post-count"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-to-post-count",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route listen-to-post-count --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/listen-to-post-count",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-thread-for-post": {
        "name": "@lyku/get-thread-for-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-thread-for-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-thread-for-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-thread-for-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-thread-for-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-thread-for-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-thread-for-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-thread-for-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-thread-for-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-channel-videos": {
        "name": "@lyku/list-channel-videos",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-channel-videos",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-channel-videos",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-channel-videos"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-channel-videos --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-channel-videos"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-channel-videos",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-channel-videos --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-channel-videos",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/stream-current-user": {
        "name": "@lyku/stream-current-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/stream-current-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/stream-current-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route stream-current-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route stream-current-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route stream-current-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route stream-current-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route stream-current-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/stream-current-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/confirm-pfp-upload": {
        "name": "@lyku/confirm-pfp-upload",
        "type": "lib",
        "data": {
          "root": "apps/routes/confirm-pfp-upload",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/confirm-pfp-upload",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route confirm-pfp-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route confirm-pfp-upload --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route confirm-pfp-upload"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-pfp-upload",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route confirm-pfp-upload --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/confirm-pfp-upload",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-follow-vectors": {
        "name": "@lyku/get-follow-vectors",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-follow-vectors",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-follow-vectors",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-follow-vectors"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-follow-vectors --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-follow-vectors"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-follow-vectors",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-follow-vectors --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-follow-vectors",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/delete-friendship": {
        "name": "@lyku/delete-friendship",
        "type": "lib",
        "data": {
          "root": "apps/routes/delete-friendship",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/delete-friendship",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route delete-friendship"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route delete-friendship --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route delete-friendship"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-friendship",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-friendship --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/delete-friendship",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-achievements": {
        "name": "@lyku/list-achievements",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-achievements",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-achievements",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-achievements"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-achievements --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-achievements"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-achievements",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-achievements --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-achievements",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-groups-i-own": {
        "name": "@lyku/list-groups-i-own",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-groups-i-own",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-groups-i-own",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-groups-i-own"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-groups-i-own --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-groups-i-own"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-i-own",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-i-own --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-groups-i-own",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-groups-im-in": {
        "name": "@lyku/list-groups-im-in",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-groups-im-in",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-groups-im-in",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-groups-im-in"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-groups-im-in --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-groups-im-in"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-im-in",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups-im-in --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-groups-im-in",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-post-replies": {
        "name": "@lyku/list-post-replies",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-post-replies",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-post-replies",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-post-replies"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-post-replies --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-post-replies"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-post-replies",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-post-replies --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-post-replies",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/test-notification": {
        "name": "@lyku/test-notification",
        "type": "lib",
        "data": {
          "root": "apps/routes/test-notification",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/test-notification",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route test-notification"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route test-notification --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route test-notification"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route test-notification",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route test-notification --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/test-notification",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-current-user": {
        "name": "@lyku/get-current-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-current-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-current-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-current-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-current-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-current-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-current-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-current-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-current-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-my-reactions": {
        "name": "@lyku/get-my-reactions",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-my-reactions",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-my-reactions",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-my-reactions"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-my-reactions --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-my-reactions"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-my-reactions",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-my-reactions --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-my-reactions",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-tus-endpoint": {
        "name": "@lyku/get-tus-endpoint",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-tus-endpoint",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-tus-endpoint",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-tus-endpoint"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-tus-endpoint --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-tus-endpoint"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-tus-endpoint",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-tus-endpoint --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-tus-endpoint",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-user-by-name": {
        "name": "@lyku/get-user-by-name",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-user-by-name",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-user-by-name",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/build-route get-user-by-name"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-user-by-name --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-user-by-name"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-user-by-name",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-user-by-name --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-user-by-name",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-my-channels": {
        "name": "@lyku/list-my-channels",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-my-channels",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-my-channels",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-my-channels"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-my-channels --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-my-channels"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-my-channels",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-my-channels --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-my-channels",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-ttf-matches": {
        "name": "@lyku/list-ttf-matches",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-ttf-matches",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-ttf-matches",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-ttf-matches"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-ttf-matches --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-ttf-matches"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-ttf-matches",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-ttf-matches --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-ttf-matches",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/new-ai-ttf-match": {
        "name": "@lyku/new-ai-ttf-match",
        "type": "lib",
        "data": {
          "root": "apps/routes/new-ai-ttf-match",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/new-ai-ttf-match",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route new-ai-ttf-match"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route new-ai-ttf-match --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route new-ai-ttf-match"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route new-ai-ttf-match",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route new-ai-ttf-match --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/new-ai-ttf-match",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-feed-posts": {
        "name": "@lyku/list-feed-posts",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-feed-posts",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-feed-posts",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-feed-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-feed-posts --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-feed-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-feed-posts",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-feed-posts --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-feed-posts",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-user-posts": {
        "name": "@lyku/list-user-posts",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-user-posts",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-user-posts",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-user-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-user-posts --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-user-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-user-posts",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-user-posts --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-user-posts",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/reaction-worker": {
        "name": "@lyku/reaction-worker",
        "type": "lib",
        "data": {
          "root": "apps/routes/reaction-worker",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/reaction-worker",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route reaction-worker"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route reaction-worker --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route reaction-worker"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route reaction-worker",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route reaction-worker --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/reaction-worker",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/am-i-following": {
        "name": "@lyku/am-i-following",
        "type": "lib",
        "data": {
          "root": "apps/routes/am-i-following",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/am-i-following",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route am-i-following"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route am-i-following --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route am-i-following"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route am-i-following",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route am-i-following --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/am-i-following",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-hot-posts": {
        "name": "@lyku/list-hot-posts",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-hot-posts",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-hot-posts",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-hot-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-hot-posts --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-hot-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-hot-posts",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-hot-posts --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-hot-posts",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/update-channel": {
        "name": "@lyku/update-channel",
        "type": "lib",
        "data": {
          "root": "apps/routes/update-channel",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/update-channel",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route update-channel"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route update-channel --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route update-channel"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route update-channel",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route update-channel --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/update-channel",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/elasticsearch-client": {
        "name": "@lyku/elasticsearch-client",
        "type": "lib",
        "data": {
          "root": "libs/elasticsearch-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/elasticsearch-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/elasticsearch-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/elasticsearch-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/elasticsearch-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/elasticsearch-client --includeDependentProjects -- bun nx build-deps @lyku/elasticsearch-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/elasticsearch-client",
                "main": "libs/elasticsearch-client/src/index.ts",
                "tsConfig": "libs/elasticsearch-client/tsconfig.lib.json",
                "assets": [
                  "libs/elasticsearch-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/elasticsearch-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/elasticsearch-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/elasticsearch/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/finalize-post": {
        "name": "@lyku/finalize-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/finalize-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/finalize-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route finalize-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route finalize-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route finalize-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route finalize-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route finalize-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/finalize-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-messages": {
        "name": "@lyku/list-messages",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-messages",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-messages",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-messages"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-messages --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-messages"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-messages",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-messages --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-messages",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/propose-match": {
        "name": "@lyku/propose-match",
        "type": "lib",
        "data": {
          "root": "apps/routes/propose-match",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/propose-match",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route propose-match"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route propose-match --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route propose-match"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route propose-match",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route propose-match --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/propose-match",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/react-to-post": {
        "name": "@lyku/react-to-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/react-to-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/react-to-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route react-to-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route react-to-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route react-to-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route react-to-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route react-to-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/react-to-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/register-user": {
        "name": "@lyku/register-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/register-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/register-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route register-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route register-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route register-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route register-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route register-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/register-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/unfollow-user": {
        "name": "@lyku/unfollow-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/unfollow-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/unfollow-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route unfollow-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route unfollow-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route unfollow-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route unfollow-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route unfollow-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/unfollow-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/create-group": {
        "name": "@lyku/create-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/create-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/create-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route create-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route create-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route create-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/create-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/delete-group": {
        "name": "@lyku/delete-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/delete-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/delete-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route delete-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route delete-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route delete-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/delete-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-friends": {
        "name": "@lyku/list-friends",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-friends",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-friends",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-friends"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-friends --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-friends"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-friends",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-friends --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-friends",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-my-bots": {
        "name": "@lyku/list-my-bots",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-my-bots",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-my-bots",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-my-bots"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-my-bots --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-my-bots"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-my-bots",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-my-bots --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-my-bots",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/update-group": {
        "name": "@lyku/update-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/update-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/update-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route update-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route update-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route update-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route update-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route update-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/update-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/delete-post": {
        "name": "@lyku/delete-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/delete-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/delete-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/build-route delete-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route delete-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route delete-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route delete-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/delete-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/follow-user": {
        "name": "@lyku/follow-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/follow-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/follow-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route follow-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route follow-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route follow-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route follow-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route follow-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/follow-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-channel": {
        "name": "@lyku/get-channel",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-channel",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-channel",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-channel"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-channel --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-channel"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-channel",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-channel --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-channel",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/leave-group": {
        "name": "@lyku/leave-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/leave-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/leave-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route leave-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route leave-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route leave-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route leave-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route leave-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/leave-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-groups": {
        "name": "@lyku/list-groups",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-groups",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-groups",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-groups"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-groups --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-groups"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-groups --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-groups",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/logout-user": {
        "name": "@lyku/logout-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/logout-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/logout-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route logout-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route logout-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route logout-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route logout-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route logout-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/logout-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/place-piece": {
        "name": "@lyku/place-piece",
        "type": "lib",
        "data": {
          "root": "apps/routes/place-piece",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/place-piece",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route place-piece"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route place-piece --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route place-piece"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route place-piece",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route place-piece --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/place-piece",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/unlike-post": {
        "name": "@lyku/unlike-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/unlike-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/unlike-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route unlike-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route unlike-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route unlike-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route unlike-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route unlike-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/unlike-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/await-file": {
        "name": "@lyku/await-file",
        "type": "lib",
        "data": {
          "root": "apps/routes/await-file",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/await-file",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route await-file"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route await-file --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route await-file"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route await-file",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route await-file --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/await-file",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/clickhouse-client": {
        "name": "@lyku/clickhouse-client",
        "type": "lib",
        "data": {
          "root": "libs/clickhouse-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/clickhouse-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/clickhouse-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/clickhouse-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/clickhouse-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/clickhouse-client --includeDependentProjects -- bun nx build-deps @lyku/clickhouse-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/clickhouse-client",
                "main": "libs/clickhouse-client/src/index.ts",
                "tsConfig": "libs/clickhouse-client/tsconfig.lib.json",
                "assets": [
                  "libs/clickhouse-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/clickhouse-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/clickhouse-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/clickhouse-client/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/create-bot": {
        "name": "@lyku/create-bot",
        "type": "lib",
        "data": {
          "root": "apps/routes/create-bot",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/create-bot",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route create-bot"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route create-bot --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route create-bot"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-bot",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route create-bot --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/create-bot",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/draft-post": {
        "name": "@lyku/draft-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/draft-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/draft-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/build-route draft-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route draft-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route draft-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route draft-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route draft-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/draft-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-groups": {
        "name": "@lyku/get-groups",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-groups",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-groups",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-groups"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-groups --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-groups"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-groups",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-groups --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-groups",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/join-group": {
        "name": "@lyku/join-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/join-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/join-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route join-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route join-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route join-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route join-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route join-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/join-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/list-games": {
        "name": "@lyku/list-games",
        "type": "lib",
        "data": {
          "root": "apps/routes/list-games",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/list-games",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route list-games"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route list-games --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route list-games"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-games",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route list-games --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/list-games",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/login-user": {
        "name": "@lyku/login-user",
        "type": "lib",
        "data": {
          "root": "apps/routes/login-user",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/login-user",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route login-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route login-user --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route login-user"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route login-user",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route login-user --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/login-user",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/mux-hooker": {
        "name": "@lyku/mux-hooker",
        "type": "lib",
        "data": {
          "root": "apps/routes/mux-hooker",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/mux-hooker",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route mux-hooker"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route mux-hooker --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route mux-hooker"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route mux-hooker",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route mux-hooker --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/mux-hooker",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-group": {
        "name": "@lyku/get-group",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-group",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-group",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-group --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-group"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-group",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-group --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-group",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-posts": {
        "name": "@lyku/get-posts",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-posts",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-posts",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-posts --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-posts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-posts",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-posts --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-posts",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-users": {
        "name": "@lyku/get-users",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-users",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-users",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-users"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-users --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-users"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-users",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-users --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-users",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-file": {
        "name": "@lyku/get-file",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-file",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-file",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-file"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-file --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-file"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-file",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-file --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-file",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/get-post": {
        "name": "@lyku/get-post",
        "type": "lib",
        "data": {
          "root": "apps/routes/get-post",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/get-post",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route get-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route get-post --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route get-post"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-post",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route get-post --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/get-post",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/postgres-client": {
        "name": "@lyku/postgres-client",
        "type": "lib",
        "data": {
          "root": "libs/postgres-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/postgres-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/postgres-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/postgres-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/postgres-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/postgres-client --includeDependentProjects -- bun nx build-deps @lyku/postgres-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/postgres-client",
                "main": "libs/postgres-client/src/index.ts",
                "tsConfig": "libs/postgres-client/tsconfig.lib.json",
                "assets": [
                  "libs/postgres-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/postgres-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/postgres-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/postgres-client/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "monolith-ts-api": {
        "name": "monolith-ts-api",
        "type": "lib",
        "data": {
          "root": "libs/monolith-ts-api",
          "targets": {
            "lint": {
              "executor": "@nx/linter:eslint",
              "outputs": [
                "{options.outputFile}"
              ],
              "options": {
                "lintFilePatterns": [
                  "libs/monolith-ts-api/**/*.ts"
                ]
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/monolith-ts-api",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/monolith-ts-api"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:tsc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/monolith-ts-api",
                "main": "libs/monolith-ts-api/src/index.ts",
                "tsConfig": "libs/monolith-ts-api/tsconfig.lib.json",
                "assets": [
                  "libs/monolith-ts-api/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "monolith-ts-api",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/monolith-ts-api",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/monolith-ts-api/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/bounced": {
        "name": "@lyku/bounced",
        "type": "lib",
        "data": {
          "root": "apps/routes/bounced",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/bounced",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route bounced"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route bounced --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route bounced"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route bounced",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route bounced --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/bounced",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/plumber": {
        "name": "@lyku/plumber",
        "type": "lib",
        "data": {
          "root": "apps/routes/plumber",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/plumber",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route plumber"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route plumber --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route plumber"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route plumber",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route plumber --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/plumber",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/route-helpers": {
        "name": "@lyku/route-helpers",
        "type": "lib",
        "data": {
          "root": "libs/route-helpers",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/route-helpers",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/route-helpers",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/route-helpers",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/route-helpers"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/route-helpers --includeDependentProjects -- bun nx build-deps @lyku/route-helpers"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/route-helpers",
                "main": "libs/route-helpers/src/index.ts",
                "tsConfig": "libs/route-helpers/tsconfig.lib.json",
                "assets": [
                  "libs/route-helpers/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/route-helpers",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/route-helpers",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/route-helpers/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/aggie": {
        "name": "@lyku/aggie",
        "type": "lib",
        "data": {
          "root": "apps/routes/aggie",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/aggie",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route aggie"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route aggie --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route aggie"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route aggie",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route aggie --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/aggie",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/queue-system": {
        "name": "@lyku/queue-system",
        "type": "lib",
        "data": {
          "root": "libs/queue-system",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/queue-system",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/queue-system",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/queue-system",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/queue-system"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/queue-system --includeDependentProjects -- bun nx build-deps @lyku/queue-system"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/queue-system",
                "main": "libs/queue-system/src/index.ts",
                "tsConfig": "libs/queue-system/tsconfig.lib.json",
                "assets": [
                  "libs/queue-system/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/queue-system",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/queue-system",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/queue-system/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/redis-client": {
        "name": "@lyku/redis-client",
        "type": "lib",
        "data": {
          "root": "libs/redis-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/redis-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/redis-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/redis-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/redis-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/redis-client --includeDependentProjects -- bun nx build-deps @lyku/redis-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/redis-client",
                "main": "libs/redis-client/src/index.ts",
                "tsConfig": "libs/redis-client/tsconfig.lib.json",
                "assets": [
                  "libs/redis-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/redis-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/redis-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/redis-client/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/indy": {
        "name": "@lyku/indy",
        "type": "lib",
        "data": {
          "root": "apps/routes/indy",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/routes/indy",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "command": "./scripts/build-route indy"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "dockerize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/dockerize-route indy --push"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "build"
              ],
              "cache": true
            },
            "kubernetize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-route indy"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "dockerize"
              ]
            },
            "deploy-job": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-indy-job"
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy-cronjob": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/deploy-indy-cronjob"
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route indy",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            },
            "grafanize:wait": {
              "executor": "nx:run-commands",
              "options": {
                "command": "./scripts/graph-route indy --wait-for-metrics",
                "cwd": ""
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/indy",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "extends": [
            "../_shared/project.json"
          ],
          "implicitDependencies": []
        }
      },
      "@lyku/json-models": {
        "name": "@lyku/json-models",
        "type": "lib",
        "data": {
          "root": "libs/json-models",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/json-models",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/json-models",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/json-models",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/json-models"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/json-models --includeDependentProjects -- bun nx build-deps @lyku/json-models"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "script": "src/build.ts",
                "runtime": "bun",
                "outputPath": "dist/libs/json-models",
                "env": {
                  "NX_OUTPUT_PATH": "{options.outputPath}"
                }
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/json-models",
              "packageExports": {
                ".": {
                  "types": "./src/index.d.ts",
                  "import": "./src/index.js"
                }
              },
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/json-models",
          "tags": [
            "npm:public"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/json-models/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/mapi-models": {
        "name": "@lyku/mapi-models",
        "type": "lib",
        "data": {
          "root": "libs/mapi-models",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/mapi-models",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/mapi-models",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/mapi-models"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {
                "packageRoot": "dist/libs/mapi-models"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:tsc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/mapi-models",
                "main": "libs/mapi-models/src/index.ts",
                "tsConfig": "libs/mapi-models/tsconfig.lib.json",
                "assets": [
                  "libs/mapi-models/*.md",
                  "libs/mapi-models/tsconfig.json",
                  "libs/mapi-models/tsconfig.lib.json"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "@lyku/mapi-models",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/mapi-models",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/mapi-models/src",
          "projectType": "library",
          "release": {
            "version": {
              "generatorOptions": {
                "packageRoot": "dist/{projectRoot}",
                "currentVersionResolver": "git-tag"
              }
            }
          },
          "implicitDependencies": []
        }
      },
      "@lyku/nats-client": {
        "name": "@lyku/nats-client",
        "type": "lib",
        "data": {
          "root": "libs/nats-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/nats-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/nats-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/nats-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/nats-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/nats-client --includeDependentProjects -- bun nx build-deps @lyku/nats-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/nats-client",
                "main": "libs/nats-client/src/index.ts",
                "tsConfig": "libs/nats-client/tsconfig.lib.json",
                "assets": [
                  "libs/nats-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/nats-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/nats-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/nats-client/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/phrasebooks": {
        "name": "@lyku/phrasebooks",
        "type": "lib",
        "data": {
          "root": "libs/phrasebooks",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/phrasebooks",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/phrasebooks",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/phrasebooks",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/phrasebooks"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/phrasebooks --includeDependentProjects -- bun nx build-deps @lyku/phrasebooks"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/phrasebooks",
                "main": "libs/phrasebooks/src/index.ts",
                "tsConfig": "libs/phrasebooks/tsconfig.lib.json",
                "assets": [
                  "libs/phrasebooks/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/phrasebooks",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/phrasebooks",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/phrasebooks/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "bson-models": {
        "name": "bson-models",
        "type": "lib",
        "data": {
          "root": "libs/bson-models",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/bson-models",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/bson-models",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/bson-models"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:tsc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/bson-models",
                "main": "libs/bson-models/src/index.ts",
                "tsConfig": "libs/bson-models/tsconfig.lib.json",
                "assets": [
                  "libs/bson-models/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "bson-models",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "bson-models",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/bson-models/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "rest-sitter": {
        "name": "rest-sitter",
        "type": "lib",
        "data": {
          "root": "libs/rest-sitter",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/rest-sitter",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/rest-sitter",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/rest-sitter"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:tsc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/rest-sitter",
                "main": "libs/rest-sitter/src/index.ts",
                "tsConfig": "libs/rest-sitter/tsconfig.lib.json",
                "assets": [
                  "libs/rest-sitter/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "rest-sitter",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "rest-sitter",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/rest-sitter/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/mapi-types": {
        "name": "@lyku/mapi-types",
        "type": "lib",
        "data": {
          "root": "libs/mapi-types",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/mapi-types",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/mapi-types",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/mapi-models"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {
                "packageRoot": "dist/libs/mapi-types"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "command": "bun --esm src/build.ts",
                "cwd": "libs/mapi-types"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "name": "@lyku/mapi-types",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/mapi-types",
              "packageMain": "./index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/mapi-types/src",
          "projectType": "library",
          "release": {
            "version": {
              "generatorOptions": {
                "packageRoot": "dist/{projectRoot}",
                "currentVersionResolver": "git-tag"
              }
            }
          },
          "implicitDependencies": []
        }
      },
      "@lyku/mux-client": {
        "name": "@lyku/mux-client",
        "type": "lib",
        "data": {
          "root": "libs/mux-client",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/mux-client",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/mux-client",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/mux-client",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/mux-client"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/mux-client --includeDependentProjects -- bun nx build-deps @lyku/mux-client"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/mux-client",
                "main": "libs/mux-client/src/index.ts",
                "tsConfig": "libs/mux-client/tsconfig.lib.json",
                "assets": [
                  "libs/mux-client/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/mux-client",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/mux-client",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/mux-client/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/stock-docs": {
        "name": "@lyku/stock-docs",
        "type": "lib",
        "data": {
          "root": "libs/stock-docs",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/stock-docs",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/stock-docs",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/stock-docs",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/stock-docs"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/stock-docs --includeDependentProjects -- bun nx build-deps @lyku/stock-docs"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/stock-docs",
                "main": "libs/stock-docs/src/index.ts",
                "tsConfig": "libs/stock-docs/tsconfig.lib.json",
                "assets": [
                  "libs/stock-docs/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/stock-docs",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/stock-docs",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/stock-docs/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/db-config": {
        "name": "@lyku/db-config",
        "type": "lib",
        "data": {
          "root": "libs/db-config",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/db-config",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/db-config",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/db-config"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/rollup:rollup",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/db-config",
                "main": "libs/db-config/src/index.ts",
                "tsConfig": "libs/db-config/tsconfig.lib.json",
                "project": "libs/db-config/package.json",
                "format": [
                  "esm"
                ],
                "compiler": "tsc",
                "external": [
                  "bson-models",
                  "@lyku/stock-docs"
                ],
                "rollupConfig": "libs/db-config/rollup.config.ts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "name": "@lyku/db-config",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/db-config",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/db-config/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "webui-e2e": {
        "name": "webui-e2e",
        "type": "e2e",
        "data": {
          "root": "apps/webui-e2e",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/webui-e2e",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "e2e": {
              "options": {
                "cwd": "apps/webui-e2e",
                "command": "playwright test"
              },
              "parallelism": false,
              "metadata": {
                "technologies": [
                  "playwright"
                ],
                "description": "Runs Playwright Tests",
                "help": {
                  "command": "bun playwright test --help",
                  "example": {
                    "options": {
                      "workers": 1
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "@playwright/test"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/test-output",
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/playwright-report"
              ],
              "executor": "nx:run-commands",
              "configurations": {}
            },
            "e2e-ci--src/example.spec.ts": {
              "options": {
                "cwd": "apps/webui-e2e",
                "env": {
                  "PLAYWRIGHT_HTML_OUTPUT_DIR": "../../dist/.playwright/apps/webui-e2e/playwright-report/src-example-spec-ts",
                  "PLAYWRIGHT_HTML_REPORT": "../../dist/.playwright/apps/webui-e2e/playwright-report/src-example-spec-ts"
                },
                "command": "playwright test src/example.spec.ts --output=../../dist/.playwright/apps/webui-e2e/test-output/src-example-spec-ts"
              },
              "parallelism": true,
              "metadata": {
                "technologies": [
                  "playwright"
                ],
                "description": "Runs Playwright Tests in src/example.spec.ts in CI",
                "help": {
                  "command": "bun playwright test --help",
                  "example": {
                    "options": {
                      "workers": 1
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "@playwright/test"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/test-output/src-example-spec-ts",
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/playwright-report/src-example-spec-ts"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "dependsOn": [
                "^build"
              ]
            },
            "e2e-ci": {
              "executor": "nx:noop",
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "@playwright/test"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/test-output",
                "{workspaceRoot}/dist/.playwright/apps/webui-e2e/playwright-report"
              ],
              "dependsOn": [
                {
                  "target": "e2e-ci--src/example.spec.ts",
                  "projects": "self",
                  "params": "forward"
                }
              ],
              "parallelism": false,
              "metadata": {
                "technologies": [
                  "playwright"
                ],
                "description": "Runs Playwright Tests in CI",
                "nonAtomizedTarget": "e2e",
                "help": {
                  "command": "bun playwright test --help",
                  "example": {
                    "options": {
                      "workers": 1
                    }
                  }
                }
              },
              "configurations": {},
              "options": {}
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            }
          },
          "metadata": {
            "targetGroups": {
              "E2E (CI)": [
                "e2e-ci--src/example.spec.ts",
                "e2e-ci"
              ]
            },
            "js": {
              "packageName": "webui-e2e",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "webui-e2e",
          "tags": [
            "npm:public"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "projectType": "application",
          "sourceRoot": "apps/webui-e2e/src",
          "implicitDependencies": [
            "webui"
          ]
        }
      },
      "@lyku/dataform": {
        "name": "@lyku/dataform",
        "type": "lib",
        "data": {
          "root": "apps/dataform",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "apps/dataform",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "form": {
              "executor": "nx:run-script",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "script": "bun src/form.ts > ../../sql/create_tables.sql",
                "runtime": "bun",
                "outputPath": "../../sql/create_tables.sql"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/dataform",
          "tags": [
            "npm:public"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "isInPackageManagerWorkspaces": false
            }
          },
          "implicitDependencies": []
        }
      },
      "@lyku/db-types": {
        "name": "@lyku/db-types",
        "type": "lib",
        "data": {
          "root": "libs/db-types",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/db-types",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/db-types",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/db-config"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-commands",
              "options": {
                "outputPath": "dist/libs/db-types/kysely.d.ts",
                "command": "bun libs/db-types/kysely.ts"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "name": "@lyku/db-types",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/db-types",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/db-types/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/defaults": {
        "name": "@lyku/defaults",
        "type": "lib",
        "data": {
          "root": "libs/defaults",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/defaults",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/defaults",
                "env": {
                  "TS_NODE_COMPILER_OPTIONS": "{\"moduleResolution\":\"node10\"}"
                },
                "command": "jest"
              },
              "metadata": {
                "technologies": [
                  "jest"
                ],
                "description": "Run Jest Tests",
                "help": {
                  "command": "bun jest --help",
                  "example": {
                    "options": {
                      "coverage": true
                    }
                  }
                }
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                "{workspaceRoot}/jest.preset.ts",
                {
                  "externalDependencies": [
                    "jest"
                  ]
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/defaults"
              ],
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/defaults",
                "main": "libs/defaults/src/index.ts",
                "tsConfig": "libs/defaults/tsconfig.lib.json",
                "assets": [
                  "libs/defaults/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "@lyku/defaults",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/defaults",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/defaults/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/handles": {
        "name": "@lyku/handles",
        "type": "lib",
        "data": {
          "root": "libs/handles",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/handles",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/handles",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/handles",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/handles"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/handles --includeDependentProjects -- bun nx build-deps @lyku/handles"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "script": "src/build.ts",
                "runtime": "bun",
                "outputPath": "dist/libs/handles"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/handles",
              "packageMain": "./src/index.ts",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/handles",
          "tags": [
            "npm:public"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/handles/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/helpers": {
        "name": "@lyku/helpers",
        "type": "lib",
        "data": {
          "root": "libs/helpers",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/helpers",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/helpers",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/helpers",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/helpers"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/helpers --includeDependentProjects -- bun nx build-deps @lyku/helpers"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/helpers",
                "main": "libs/helpers/src/index.ts",
                "tsConfig": "libs/helpers/tsconfig.lib.json",
                "assets": [
                  "libs/helpers/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/helpers",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/helpers",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/helpers/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/metrics": {
        "name": "@lyku/metrics",
        "type": "lib",
        "data": {
          "root": "libs/metrics",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/metrics",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/metrics",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/metrics",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/metrics"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/metrics --includeDependentProjects -- bun nx build-deps @lyku/metrics"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/metrics",
                "main": "libs/metrics/src/index.ts",
                "tsConfig": "libs/metrics/tsconfig.lib.json",
                "assets": [
                  "libs/metrics/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/metrics",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/metrics",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/si-bits": {
        "name": "@lyku/si-bits",
        "type": "lib",
        "data": {
          "root": "libs/si-bits",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/si-bits",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/vite:build",
              "outputs": [
                "{options.outputPath}"
              ],
              "defaultConfiguration": "production",
              "options": {
                "outputPath": "dist/libs/si-bits",
                "configFile": "libs/si-bits/vite.config.ts"
              },
              "configurations": {
                "development": {
                  "mode": "development"
                },
                "production": {
                  "mode": "production"
                }
              },
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "serve": {
              "options": {
                "cwd": "libs/si-bits",
                "command": "vite"
              },
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Starts Vite dev server",
                "help": {
                  "command": "bun vite --help",
                  "example": {
                    "options": {
                      "port": 3000
                    }
                  }
                },
                "deprecated": "Use devTargetName instead. This option will be removed in Nx 22."
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "dev": {
              "options": {
                "cwd": "libs/si-bits",
                "command": "vite"
              },
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Starts Vite dev server",
                "help": {
                  "command": "bun vite --help",
                  "example": {
                    "options": {
                      "port": 3000
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "preview": {
              "dependsOn": [
                "build"
              ],
              "options": {
                "cwd": "libs/si-bits",
                "command": "vite preview"
              },
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Locally preview Vite production build",
                "help": {
                  "command": "bun vite preview --help",
                  "example": {
                    "options": {
                      "port": 3000
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "serve-static": {
              "executor": "@nx/web:file-server",
              "options": {
                "buildTarget": "build",
                "spa": true
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/si-bits",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/si-bits",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/si-bits"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/si-bits --includeDependentProjects -- bun nx build-deps @lyku/si-bits"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "projectType": "library",
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/si-bits",
              "packageMain": "./index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/si-bits",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/si-bits/src",
          "implicitDependencies": []
        }
      },
      "@lyku/strings": {
        "name": "@lyku/strings",
        "type": "lib",
        "data": {
          "root": "libs/strings",
          "targets": {
            "lint": {
              "executor": "@nx/linter:eslint",
              "outputs": [
                "{options.outputFile}"
              ],
              "options": {
                "lintFilePatterns": [
                  "libs/strings/**/*.ts"
                ]
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/strings",
                "main": "libs/strings/src/index.ts",
                "tsConfig": "libs/strings/tsconfig.lib.json",
                "assets": [
                  "libs/strings/*.md"
                ],
                "generatePackageJson": true,
                "format": [
                  "cjs",
                  "esm"
                ],
                "buildableProjectDepsInPackageJsonType": "dependencies",
                "skipTypeCheck": false,
                "generateLockfile": false
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "name": "@lyku/strings",
          "tags": [
            "npm:private"
          ],
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/strings",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/strings",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/ttf-ais": {
        "name": "@lyku/ttf-ais",
        "type": "lib",
        "data": {
          "root": "libs/ttf-ais",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/ttf-ais",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/ttf-ais",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/ttf-ais",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/helpers"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/ttf-ais --includeDependentProjects -- bun nx build-deps @lyku/ttf-ais"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/ttf-ais",
                "main": "libs/ttf-ais/src/index.ts",
                "tsConfig": "libs/ttf-ais/tsconfig.lib.json",
                "assets": [
                  "libs/ttf-ais/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/ttf-ais",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/ttf-ais",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/ttf-ais/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/logger": {
        "name": "@lyku/logger",
        "type": "lib",
        "data": {
          "root": "libs/logger",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/logger",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/logger",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/logger",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/libs/logger"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/logger --includeDependentProjects -- bun nx build-deps @lyku/logger"
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/js:swc",
              "outputs": [
                "{options.outputPath}"
              ],
              "options": {
                "outputPath": "dist/libs/logger",
                "main": "libs/logger/src/index.ts",
                "tsConfig": "libs/logger/tsconfig.lib.json",
                "assets": [
                  "libs/logger/*.md"
                ]
              },
              "configurations": {},
              "parallelism": true,
              "cache": true,
              "dependsOn": [
                "^build"
              ],
              "inputs": [
                "production",
                "^production"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/metrics",
              "packageMain": "./src/index.js",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/logger",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/logger/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "@lyku/stats": {
        "name": "@lyku/stats",
        "type": "lib",
        "data": {
          "root": "libs/stats",
          "targets": {
            "lint": {
              "cache": true,
              "options": {
                "cwd": "libs/stats",
                "env": {
                  "ESLINT_USE_FLAT_CONFIG": "false"
                },
                "command": "eslint ."
              },
              "inputs": [
                "default",
                "^default",
                "{workspaceRoot}/.eslintrc.json",
                "{projectRoot}/.eslintrc.json",
                "{workspaceRoot}/tools/eslint-rules/**/*",
                {
                  "externalDependencies": [
                    "eslint"
                  ]
                }
              ],
              "outputs": [
                "{options.outputFile}"
              ],
              "metadata": {
                "technologies": [
                  "eslint"
                ],
                "description": "Runs ESLint on project",
                "help": {
                  "command": "bun eslint --help",
                  "example": {
                    "options": {
                      "max-warnings": 0
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "libs/stats",
                "command": "tsc --noEmit -p tsconfig.lib.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.lib.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": "libs/stats",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{workspaceRoot}/coverage/{projectRoot}"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/stats --includeDependentProjects -- bun nx build-deps @lyku/stats"
              },
              "configurations": {},
              "parallelism": true
            },
            "nx-release-publish": {
              "executor": "@nx/js:release-publish",
              "dependsOn": [
                "^nx-release-publish"
              ],
              "options": {},
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "nx:run-script",
              "options": {
                "cwd": "../..",
                "script": "index.ts",
                "runtime": "bun",
                "outputPath": "dist/libs/stats"
              },
              "configurations": {},
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            }
          },
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/stats",
              "packageMain": "./index.ts",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "@lyku/stats",
          "tags": [
            "npm:public"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "libs/stats/src",
          "projectType": "library",
          "implicitDependencies": []
        }
      },
      "webui": {
        "name": "webui",
        "type": "app",
        "data": {
          "root": "apps/webui",
          "targets": {
            "lint": {
              "executor": "@nx/linter:eslint",
              "outputs": [
                "{options.outputFile}"
              ],
              "options": {
                "lintFilePatterns": [
                  "apps/webui/**/*.{ts,tsx,js,jsx}"
                ]
              },
              "configurations": {},
              "parallelism": true
            },
            "build": {
              "executor": "@nx/vite:build",
              "outputs": [
                "{options.outputPath}"
              ],
              "defaultConfiguration": "production",
              "options": {
                "outputPath": "dist/apps/webui"
              },
              "configurations": {
                "development": {
                  "buildTarget": "webui:build:development",
                  "hmr": true,
                  "mode": "development"
                },
                "production": {
                  "buildTarget": "webui:build:production",
                  "hmr": false,
                  "mode": "production"
                }
              },
              "parallelism": true,
              "dependsOn": [
                "^build",
                "^compile",
                "^generate-types",
                "^post-build"
              ]
            },
            "serve": {
              "executor": "@nx/vite:dev-server",
              "defaultConfiguration": "development",
              "options": {
                "buildTarget": "webui:build",
                "maxMemory": 8192
              },
              "configurations": {
                "development": {
                  "buildTarget": "webui:build:development",
                  "hmr": true
                },
                "production": {
                  "buildTarget": "webui:build:production",
                  "hmr": false
                }
              },
              "parallelism": true
            },
            "dev": {
              "options": {
                "cwd": "apps/webui",
                "command": "vite"
              },
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Starts Vite dev server",
                "help": {
                  "command": "bun vite --help",
                  "example": {
                    "options": {
                      "port": 3000
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "preview": {
              "dependsOn": [
                "build"
              ],
              "options": {
                "cwd": "apps/webui",
                "command": "vite preview"
              },
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Locally preview Vite production build",
                "help": {
                  "command": "bun vite preview --help",
                  "example": {
                    "options": {
                      "port": 3000
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "serve-static": {
              "executor": "@nx/web:file-server",
              "options": {
                "buildTarget": "build",
                "spa": true
              },
              "configurations": {},
              "parallelism": true
            },
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": "apps/webui",
                "command": "tsc --noEmit -p tsconfig.app.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.app.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects webui --includeDependentProjects -- bun nx build-deps webui"
              },
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "executor": "@nx/vite:test",
              "outputs": [
                "{projectRoot}/coverage"
              ],
              "options": {
                "passWithNoTests": false
              },
              "configurations": {},
              "parallelism": true
            },
            "deploy": {
              "executor": "nx:run-commands",
              "options": {
                "commands": [
                  "wrangler deploy dist/apps/webui/cloudflare/_worker.js -c apps/webui/wrangler.toml"
                ]
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "projectType": "application",
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/webui",
              "isInPackageManagerWorkspaces": false
            }
          },
          "name": "webui",
          "tags": [
            "npm:private"
          ],
          "$schema": "../../node_modules/nx/schemas/project-schema.json",
          "sourceRoot": "apps/webui/src",
          "implicitDependencies": []
        }
      },
      "@lyku/source": {
        "name": "@lyku/source",
        "type": "lib",
        "data": {
          "root": ".",
          "metadata": {
            "targetGroups": {},
            "js": {
              "packageName": "@lyku/source",
              "isInPackageManagerWorkspaces": true
            }
          },
          "targets": {
            "typecheck": {
              "cache": true,
              "inputs": [
                "production",
                "^production",
                {
                  "externalDependencies": [
                    "typescript"
                  ]
                }
              ],
              "options": {
                "cwd": ".",
                "command": "tsc --noEmit -p tsconfig.json"
              },
              "metadata": {
                "description": "Runs type-checking for the project.",
                "technologies": [
                  "typescript"
                ],
                "help": {
                  "command": "bun tsc -p tsconfig.json --help",
                  "example": {
                    "options": {
                      "noEmit": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "test": {
              "options": {
                "cwd": ".",
                "command": "vitest"
              },
              "cache": true,
              "inputs": [
                "default",
                "^production",
                {
                  "externalDependencies": [
                    "vitest"
                  ]
                },
                {
                  "env": "CI"
                }
              ],
              "outputs": [
                "{projectRoot}/coverage"
              ],
              "metadata": {
                "technologies": [
                  "vite"
                ],
                "description": "Run Vite tests",
                "help": {
                  "command": "bun vitest --help",
                  "example": {
                    "options": {
                      "bail": 1,
                      "coverage": true
                    }
                  }
                }
              },
              "executor": "nx:run-commands",
              "configurations": {},
              "parallelism": true
            },
            "build-deps": {
              "dependsOn": [
                "^build"
              ],
              "configurations": {},
              "options": {},
              "parallelism": true,
              "executor": "nx:noop"
            },
            "watch-deps": {
              "dependsOn": [
                "build-deps"
              ],
              "executor": "nx:run-commands",
              "options": {
                "command": "bun nx watch --projects @lyku/source --includeDependentProjects -- bun nx build-deps @lyku/source"
              },
              "configurations": {},
              "parallelism": true
            },
            "local-registry": {
              "executor": "@nx/js:verdaccio",
              "options": {
                "port": 4873,
                "config": ".verdaccio/config.yml",
                "storage": "tmp/local-registry/storage"
              },
              "configurations": {},
              "parallelism": true
            }
          },
          "name": "@lyku/source",
          "includedScripts": [],
          "tags": [
            "npm:private"
          ],
          "$schema": "node_modules/nx/schemas/project-schema.json",
          "implicitDependencies": []
        }
      }
    },
    "dependencies": {
      "@lyku/list-feed-posts-unauthenticated": [
        {
          "source": "@lyku/list-feed-posts-unauthenticated",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-feed-posts-unauthenticated",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-feed-posts-unauthenticated",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-groups-unauthenticated": [
        {
          "source": "@lyku/list-groups-unauthenticated",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-unauthenticated",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-unauthenticated",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-user-posts-with-meta": [
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts-with-meta",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/listen-for-notifications": [
        {
          "source": "@lyku/listen-for-notifications",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-notifications",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-notifications",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-notifications",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-achievement-grants": [
        {
          "source": "@lyku/list-achievement-grants",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-achievement-grants",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-achievement-grants",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/listen-for-achievements": [
        {
          "source": "@lyku/listen-for-achievements",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-achievements",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-achievements",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-achievements",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/authorize-image-upload": [
        {
          "source": "@lyku/authorize-image-upload",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/authorize-image-upload",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/authorize-image-upload",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/authorize-image-upload",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/decline-friend-request": [
        {
          "source": "@lyku/decline-friend-request",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/decline-friend-request",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/decline-friend-request",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/decline-friend-request",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-channel-sensitives": [
        {
          "source": "@lyku/get-channel-sensitives",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-channel-sensitives",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-channel-sensitives",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/accept-friend-request": [
        {
          "source": "@lyku/accept-friend-request",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/accept-friend-request",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/accept-friend-request",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/accept-friend-request",
          "target": "@lyku/route-helpers",
          "type": "static"
        }
      ],
      "@lyku/accept-match-proposal": [
        {
          "source": "@lyku/accept-match-proposal",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/accept-match-proposal",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/accept-match-proposal",
          "target": "@lyku/stock-docs",
          "type": "static"
        },
        {
          "source": "@lyku/accept-match-proposal",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/accept-match-proposal",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/create-friend-request": [
        {
          "source": "@lyku/create-friend-request",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/create-friend-request",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/create-friend-request",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/create-friend-request",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-friendship-status": [
        {
          "source": "@lyku/get-friendship-status",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-friendship-status",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-friendship-status",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-friendship-status",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-groups-i-created": [
        {
          "source": "@lyku/list-groups-i-created",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-i-created",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-i-created",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/recind-friend-request": [
        {
          "source": "@lyku/recind-friend-request",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/recind-friend-request",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/recind-friend-request",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/confirm-image-upload": [
        {
          "source": "@lyku/confirm-image-upload",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-image-upload",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-image-upload",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-image-upload",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/confirm-video-upload": [
        {
          "source": "@lyku/confirm-video-upload",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-video-upload",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-video-upload",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-video-upload",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-match-proposals": [
        {
          "source": "@lyku/list-match-proposals",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-match-proposals",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-match-proposals",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/listen-for-ttf-plays": [
        {
          "source": "@lyku/listen-for-ttf-plays",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-ttf-plays",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-ttf-plays",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-for-ttf-plays",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/listen-to-post-count": [
        {
          "source": "@lyku/listen-to-post-count",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-to-post-count",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/listen-to-post-count",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/listen-to-post-count",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-thread-for-post": [
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/get-thread-for-post",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/list-channel-videos": [
        {
          "source": "@lyku/list-channel-videos",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-channel-videos",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-channel-videos",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/list-channel-videos",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/stream-current-user": [
        {
          "source": "@lyku/stream-current-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/stream-current-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/stream-current-user",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/confirm-pfp-upload": [
        {
          "source": "@lyku/confirm-pfp-upload",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-pfp-upload",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-pfp-upload",
          "target": "@lyku/mux-client",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-pfp-upload",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/confirm-pfp-upload",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-follow-vectors": [
        {
          "source": "@lyku/get-follow-vectors",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-follow-vectors",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-follow-vectors",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/delete-friendship": [
        {
          "source": "@lyku/delete-friendship",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-friendship",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/delete-friendship",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-friendship",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-achievements": [
        {
          "source": "@lyku/list-achievements",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-achievements",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-achievements",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-groups-i-own": [
        {
          "source": "@lyku/list-groups-i-own",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-i-own",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-i-own",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-groups-im-in": [
        {
          "source": "@lyku/list-groups-im-in",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-im-in",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-im-in",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-im-in",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups-im-in",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/list-post-replies": [
        {
          "source": "@lyku/list-post-replies",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-post-replies",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-post-replies",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/test-notification": [
        {
          "source": "@lyku/test-notification",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/test-notification",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/test-notification",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/test-notification",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-current-user": [
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/get-current-user",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-my-reactions": [
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/get-my-reactions",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-tus-endpoint": [
        {
          "source": "@lyku/get-tus-endpoint",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-tus-endpoint",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-tus-endpoint",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-tus-endpoint",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-user-by-name": [
        {
          "source": "@lyku/get-user-by-name",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-user-by-name",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-user-by-name",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-user-by-name",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-my-channels": [
        {
          "source": "@lyku/list-my-channels",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-my-channels",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-my-channels",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-ttf-matches": [
        {
          "source": "@lyku/list-ttf-matches",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-ttf-matches",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-ttf-matches",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/new-ai-ttf-match": [
        {
          "source": "@lyku/new-ai-ttf-match",
          "target": "@lyku/ttf-ais",
          "type": "static"
        },
        {
          "source": "@lyku/new-ai-ttf-match",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/new-ai-ttf-match",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/new-ai-ttf-match",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-feed-posts": [
        {
          "source": "@lyku/list-feed-posts",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-feed-posts",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-feed-posts",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-user-posts": [
        {
          "source": "@lyku/list-user-posts",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-user-posts",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/reaction-worker": [
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/metrics",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/queue-system",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/db-types",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        },
        {
          "source": "@lyku/reaction-worker",
          "target": "@lyku/route-helpers",
          "type": "static"
        }
      ],
      "@lyku/am-i-following": [
        {
          "source": "@lyku/am-i-following",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/am-i-following",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/am-i-following",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/am-i-following",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-hot-posts": [
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/list-hot-posts",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/update-channel": [
        {
          "source": "@lyku/update-channel",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/update-channel",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/update-channel",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/update-channel",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/elasticsearch-client": [],
      "@lyku/finalize-post": [
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        },
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/finalize-post",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-messages": [
        {
          "source": "@lyku/list-messages",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-messages",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-messages",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/propose-match": [
        {
          "source": "@lyku/propose-match",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/propose-match",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/propose-match",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/propose-match",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/react-to-post": [
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/queue-system",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/react-to-post",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/register-user": [
        {
          "source": "@lyku/register-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/register-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/register-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/register-user",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/register-user",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/unfollow-user": [
        {
          "source": "@lyku/unfollow-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/unfollow-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/unfollow-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/unfollow-user",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/create-group": [
        {
          "source": "@lyku/create-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/create-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/create-group",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/delete-group": [
        {
          "source": "@lyku/delete-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-group",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/delete-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-group",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-friends": [
        {
          "source": "@lyku/list-friends",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-friends",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-friends",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-my-bots": [
        {
          "source": "@lyku/list-my-bots",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-my-bots",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-my-bots",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/update-group": [
        {
          "source": "@lyku/update-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/update-group",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/update-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/update-group",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/delete-post": [
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/delete-post",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/follow-user": [
        {
          "source": "@lyku/follow-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/follow-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/follow-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/follow-user",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-channel": [
        {
          "source": "@lyku/get-channel",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-channel",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-channel",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/leave-group": [
        {
          "source": "@lyku/leave-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/leave-group",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/leave-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/leave-group",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/list-groups": [
        {
          "source": "@lyku/list-groups",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-groups",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/logout-user": [
        {
          "source": "@lyku/logout-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/logout-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/logout-user",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/place-piece": [
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/ttf-ais",
          "type": "static"
        },
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/stock-docs",
          "type": "static"
        },
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/place-piece",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/unlike-post": [
        {
          "source": "@lyku/unlike-post",
          "target": "@lyku/elasticsearch-client",
          "type": "static"
        },
        {
          "source": "@lyku/unlike-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/unlike-post",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/await-file": [
        {
          "source": "@lyku/await-file",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/await-file",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/clickhouse-client": [],
      "@lyku/create-bot": [
        {
          "source": "@lyku/create-bot",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/create-bot",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/create-bot",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/draft-post": [
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/draft-post",
          "target": "@lyku/mux-client",
          "type": "static"
        }
      ],
      "@lyku/get-groups": [
        {
          "source": "@lyku/get-groups",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-groups",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-groups",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/join-group": [
        {
          "source": "@lyku/join-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/join-group",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/join-group",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/join-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/join-group",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/join-group",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/list-games": [
        {
          "source": "@lyku/list-games",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/list-games",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/list-games",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/login-user": [
        {
          "source": "@lyku/login-user",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/login-user",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/login-user",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/login-user",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/mux-hooker": [
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/mux-client",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/mux-hooker",
          "target": "@lyku/redis-client",
          "type": "static"
        }
      ],
      "@lyku/get-group": [
        {
          "source": "@lyku/get-group",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-group",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-group",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-group",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/get-group",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-group",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-posts": [
        {
          "source": "@lyku/get-posts",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-posts",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-posts",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/get-users": [
        {
          "source": "@lyku/get-users",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-users",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-users",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/get-users",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-file": [
        {
          "source": "@lyku/get-file",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-file",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-file",
          "target": "@lyku/nats-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-file",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-file",
          "target": "@lyku/handles",
          "type": "static"
        },
        {
          "source": "@lyku/get-file",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/get-post": [
        {
          "source": "@lyku/get-post",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-post",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/get-post",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/get-post",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/postgres-client": [
        {
          "source": "@lyku/postgres-client",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/postgres-client",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/postgres-client",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/postgres-client",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "monolith-ts-api": [
        {
          "source": "monolith-ts-api",
          "target": "@lyku/mapi-models",
          "type": "static"
        },
        {
          "source": "monolith-ts-api",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "monolith-ts-api",
          "target": "@lyku/mapi-types",
          "type": "static"
        },
        {
          "source": "monolith-ts-api",
          "target": "@lyku/defaults",
          "type": "static"
        }
      ],
      "@lyku/bounced": [
        {
          "source": "@lyku/bounced",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/bounced",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "@lyku/bounced",
          "target": "@lyku/handles",
          "type": "static"
        }
      ],
      "@lyku/plumber": [
        {
          "source": "@lyku/plumber",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/plumber",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        },
        {
          "source": "@lyku/plumber",
          "target": "@lyku/elasticsearch-client",
          "type": "static"
        },
        {
          "source": "@lyku/plumber",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/plumber",
          "target": "@lyku/redis-client",
          "type": "static"
        }
      ],
      "@lyku/route-helpers": [
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/strings",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/stock-docs",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "bson-models",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/route-helpers",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        }
      ],
      "@lyku/aggie": [
        {
          "source": "@lyku/aggie",
          "target": "@lyku/logger",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/elasticsearch-client",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/metrics",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/db-types",
          "type": "static"
        },
        {
          "source": "@lyku/aggie",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/queue-system": [
        {
          "source": "@lyku/queue-system",
          "target": "@lyku/redis-client",
          "type": "static"
        },
        {
          "source": "@lyku/queue-system",
          "target": "@lyku/logger",
          "type": "static"
        }
      ],
      "@lyku/redis-client": [],
      "@lyku/indy": [
        {
          "source": "@lyku/indy",
          "target": "@lyku/elasticsearch-client",
          "type": "static"
        },
        {
          "source": "@lyku/indy",
          "target": "@lyku/postgres-client",
          "type": "static"
        },
        {
          "source": "@lyku/indy",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/json-models": [
        {
          "source": "@lyku/json-models",
          "target": "bson-models",
          "type": "static"
        }
      ],
      "@lyku/mapi-models": [
        {
          "source": "@lyku/mapi-models",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-models",
          "target": "bson-models",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-models",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-models",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/nats-client": [
        {
          "source": "@lyku/nats-client",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/nats-client",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/nats-client",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/nats-client",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/phrasebooks": [
        {
          "source": "@lyku/phrasebooks",
          "target": "@lyku/strings",
          "type": "static"
        },
        {
          "source": "@lyku/phrasebooks",
          "target": "@lyku/defaults",
          "type": "static"
        }
      ],
      "bson-models": [
        {
          "source": "bson-models",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "bson-models",
          "target": "@lyku/defaults",
          "type": "static"
        }
      ],
      "rest-sitter": [],
      "@lyku/mapi-types": [
        {
          "source": "@lyku/mapi-types",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-types",
          "target": "bson-models",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-types",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-types",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/mapi-types",
          "target": "@lyku/mapi-models",
          "type": "static"
        }
      ],
      "@lyku/mux-client": [],
      "@lyku/stock-docs": [
        {
          "source": "@lyku/stock-docs",
          "target": "bson-models",
          "type": "static"
        },
        {
          "source": "@lyku/stock-docs",
          "target": "@lyku/json-models",
          "type": "static"
        }
      ],
      "@lyku/db-config": [
        {
          "source": "@lyku/db-config",
          "target": "bson-models",
          "type": "static"
        },
        {
          "source": "@lyku/db-config",
          "target": "@lyku/stock-docs",
          "type": "static"
        }
      ],
      "webui-e2e": [
        {
          "source": "webui-e2e",
          "target": "webui",
          "type": "implicit"
        }
      ],
      "@lyku/dataform": [
        {
          "source": "@lyku/dataform",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/dataform",
          "target": "@lyku/route-helpers",
          "type": "static"
        }
      ],
      "@lyku/db-types": [
        {
          "source": "@lyku/db-types",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/db-types",
          "target": "bson-models",
          "type": "static"
        }
      ],
      "@lyku/defaults": [],
      "@lyku/handles": [
        {
          "source": "@lyku/handles",
          "target": "@lyku/mapi-models",
          "type": "static"
        },
        {
          "source": "@lyku/handles",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "@lyku/handles",
          "target": "@lyku/strings",
          "type": "static"
        },
        {
          "source": "@lyku/handles",
          "target": "@lyku/route-helpers",
          "type": "static"
        }
      ],
      "@lyku/helpers": [
        {
          "source": "@lyku/helpers",
          "target": "@lyku/defaults",
          "type": "static"
        }
      ],
      "@lyku/metrics": [
        {
          "source": "@lyku/metrics",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/metrics",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/metrics",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/metrics",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/metrics",
          "target": "@lyku/logger",
          "type": "static"
        }
      ],
      "@lyku/si-bits": [
        {
          "source": "@lyku/si-bits",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/si-bits",
          "target": "@lyku/stock-docs",
          "type": "static"
        },
        {
          "source": "@lyku/si-bits",
          "target": "monolith-ts-api",
          "type": "static"
        },
        {
          "source": "@lyku/si-bits",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/si-bits",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "@lyku/si-bits",
          "target": "@lyku/strings",
          "type": "static"
        }
      ],
      "@lyku/strings": [],
      "@lyku/ttf-ais": [
        {
          "source": "@lyku/ttf-ais",
          "target": "@lyku/db-types",
          "type": "static"
        },
        {
          "source": "@lyku/ttf-ais",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/ttf-ais",
          "target": "@lyku/stock-docs",
          "type": "static"
        }
      ],
      "@lyku/logger": [
        {
          "source": "@lyku/logger",
          "target": "@lyku/defaults",
          "type": "static"
        },
        {
          "source": "@lyku/logger",
          "target": "@lyku/helpers",
          "type": "static"
        },
        {
          "source": "@lyku/logger",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "@lyku/logger",
          "target": "@lyku/json-models",
          "type": "static"
        },
        {
          "source": "@lyku/logger",
          "target": "@lyku/clickhouse-client",
          "type": "static"
        }
      ],
      "@lyku/stats": [],
      "webui": [
        {
          "source": "webui",
          "target": "@lyku/phrasebooks",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/strings",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/si-bits",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/mapi-models",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "monolith-ts-api",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/db-config",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/db-types",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/route-helpers",
          "type": "static"
        },
        {
          "source": "webui",
          "target": "@lyku/helpers",
          "type": "static"
        }
      ],
      "@lyku/source": []
    }
  }
}